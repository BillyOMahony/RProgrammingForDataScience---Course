qplot(data=mergedstats, x=Birth.rate, y=Internet.users, colour=Region, size=I(2), shape=I(15))
# Points on the graph can have different transparancy
qplot(data=mergedstats, x=data=mergedstats, x=Birth.rate, y=Internet.users, colour=Region, size=I(3), alpha=i(0.25))
# Points on the graph can have different transparancy
qplot(data=mergedstats, x=data=mergedstats, x=Birth.rate, y=Internet.users, colour=Region, size=I(3), alpha=I(0.25))
# Points on the graph can have different transparancy
qplot(data=mergedstats, x=Birth.rate, y=Internet.users, colour=Region, size=I(3), alpha=I(0.25))
# Points on the graph can have different transparancy
qplot(data=mergedstats, x=Birth.rate, y=Internet.users, colour=Region, size=I(3), alpha=I(0.5))
# Points on the graph can have different transparancy
qplot(data=mergedstats, x=Birth.rate, y=Internet.users, colour=Region, size=I(5), alpha=I(0.5))
# Titles can also be added
qplot(data=mergedstats, x=Birth.rate, y=Internet.users, colour=Region, size=I(5), alpha=I(0.5), main="Birth Rate vs Internet Users")
# Different shapes can be assigned to different categories, similar to colours
qplot(data=mergedstats, x=Birth.rate, y=Internet.users, colour=Region, size=I(2), shape=Income.Group)
read.csv("\\RProgrammingForDataScience - Course\\Section 5\\P2-Section5-Homework-Data.csv")
read.csv("RProgrammingForDataScience - Course\\Section 5\\P2-Section5-Homework-Data.csv")
data <- read.csv("RProgrammingForDataScience - Course\\Section 5\\P2-Section5-Homework-Data.csv")
head(data)
summary(data)
data$Year == 1960
head(data)
data[data$Year == 1960, ]
Country_Code <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","WSM","YEM","ZAF","COD","ZMB","ZWE")
Life_Expectancy_At_Birth_1960 <- c(65.5693658536586,32.328512195122,32.9848292682927,62.2543658536585,52.2432195121951,65.2155365853659,65.8634634146342,61.7827317073171,70.8170731707317,68.5856097560976,60.836243902439,41.2360487804878,69.7019512195122,37.2782682926829,34.4779024390244,45.8293170731707,69.2475609756098,52.0893658536585,62.7290487804878,60.2762195121951,67.7080975609756,59.9613658536585,42.1183170731707,54.2054634146342,60.7380487804878,62.5003658536585,32.3593658536585,50.5477317073171,36.4826341463415,71.1331707317073,71.3134146341463,57.4582926829268,43.4658048780488,36.8724146341463,41.523756097561,48.5816341463415,56.716756097561,41.4424390243903,48.8564146341463,60.5761951219512,63.9046585365854,69.5939268292683,70.3487804878049,69.3129512195122,44.0212682926829,72.1765853658537,51.8452682926829,46.1351219512195,53.215,48.0137073170732,37.3629024390244,69.1092682926829,67.9059756097561,38.4057073170732,68.819756097561,55.9584878048781,69.8682926829268,57.5865853658537,39.5701219512195,71.1268292682927,63.4318536585366,45.8314634146342,34.8863902439024,32.0422195121951,37.8404390243902,36.7330487804878,68.1639024390244,59.8159268292683,45.5316341463415,61.2263414634146,60.2787317073171,66.9997073170732,46.2883170731707,64.6086585365854,42.1000975609756,68.0031707317073,48.6403170731707,41.1719512195122,69.691756097561,44.945512195122,48.0306829268293,73.4286585365854,69.1239024390244,64.1918292682927,52.6852682926829,67.6660975609756,58.3675853658537,46.3624146341463,56.1280731707317,41.2320243902439,49.2159756097561,53.0013170731707,60.3479512195122,43.2044634146342,63.2801219512195,34.7831707317073,42.6411951219512,57.303756097561,59.7471463414634,46.5107073170732,69.8473170731707,68.4463902439024,69.7868292682927,64.6609268292683,48.4466341463415,61.8127804878049,39.9746829268293,37.2686341463415,57.0656341463415,60.6228048780488,28.2116097560976,67.6017804878049,42.7363902439024,63.7056097560976,48.3688048780488,35.0037073170732,43.4830975609756,58.7452195121951,37.7736341463415,59.4753414634146,46.8803902439024,58.6390243902439,35.5150487804878,37.1829512195122,46.9988292682927,73.3926829268293,73.549756097561,35.1708292682927,71.2365853658537,42.6670731707317,45.2904634146342,60.8817073170732,47.6915853658537,57.8119268292683,38.462243902439,67.6804878048781,68.7196097560976,62.8089268292683,63.7937073170732,56.3570487804878,61.2060731707317,65.6424390243903,66.0552926829268,42.2492926829268,45.6662682926829,48.1876341463415,38.206,65.6598292682927,49.3817073170732,30.3315365853659,49.9479268292683,36.9658780487805,31.6767073170732,50.4513658536585,59.6801219512195,69.9759268292683,68.9780487804878,73.0056097560976,44.2337804878049,52.768243902439,38.0161219512195,40.2728292682927,54.6993170731707,56.1535365853659,54.4586829268293,33.7271219512195,61.3645365853659,62.6575853658537,42.009756097561,45.3844146341463,43.6538780487805,43.9835609756098,68.2995365853659,67.8963902439025,69.7707317073171,58.8855365853659,57.7238780487805,59.2851219512195,63.7302195121951,59.0670243902439,46.4874878048781,49.969512195122,34.3638048780488,49.0362926829268,41.0180487804878,45.1098048780488,51.5424634146342)
Life_Expectancy_At_Birth_2013 <- c(75.3286585365854,60.0282682926829,51.8661707317073,77.537243902439,77.1956341463415,75.9860975609756,74.5613658536585,75.7786585365854,82.1975609756098,80.890243902439,70.6931463414634,56.2516097560976,80.3853658536585,59.3120243902439,58.2406341463415,71.245243902439,74.4658536585366,76.5459512195122,75.0735365853659,76.2769268292683,72.4707317073171,69.9820487804878,67.9134390243903,74.1224390243903,75.3339512195122,78.5466585365854,69.1029268292683,64.3608048780488,49.8798780487805,81.4011219512195,82.7487804878049,81.1979268292683,75.3530243902439,51.2084634146342,55.0418048780488,61.6663902439024,73.8097317073171,62.9321707317073,72.9723658536585,79.2252195121951,79.2563902439025,79.9497804878049,78.2780487804878,81.0439024390244,61.6864634146342,80.3024390243903,73.3199024390244,74.5689512195122,75.648512195122,70.9257804878049,63.1778780487805,82.4268292682927,76.4243902439025,63.4421951219512,80.8317073170732,69.9179268292683,81.9682926829268,68.9733902439024,63.8435853658537,80.9560975609756,74.079512195122,61.1420731707317,58.216487804878,59.9992682926829,54.8384146341464,57.2908292682927,80.6341463414634,73.1935609756098,71.4863902439024,78.872512195122,66.3100243902439,83.8317073170732,72.9428536585366,77.1268292682927,62.4011463414634,75.2682926829268,68.7046097560976,67.6604146341463,81.0439024390244,75.1259756097561,69.4716829268293,83.1170731707317,82.290243902439,73.4689268292683,73.9014146341463,83.3319512195122,70.45,60.9537804878049,70.2024390243902,67.7720487804878,65.7665853658537,81.459756097561,74.462756097561,65.687243902439,80.1288780487805,60.5203902439024,71.6576829268293,74.9127073170732,74.2402926829268,49.3314634146342,74.1634146341464,81.7975609756098,73.9804878048781,80.3391463414634,73.7090487804878,68.811512195122,64.6739024390244,76.6026097560976,76.5326585365854,75.1870487804878,57.5351951219512,80.7463414634146,65.6540975609756,74.7583658536585,69.0618048780488,54.641512195122,62.8027073170732,74.46,61.466,74.567512195122,64.3438780487805,77.1219512195122,60.8281463414634,52.4421463414634,74.514756097561,81.1048780487805,81.4512195121951,69.222,81.4073170731707,76.8410487804878,65.9636829268293,77.4192195121951,74.2838536585366,68.1315609756097,62.4491707317073,76.8487804878049,78.7111951219512,80.3731707317073,72.7991707317073,76.3340731707317,78.4184878048781,74.4634146341463,71.0731707317073,63.3948292682927,74.1776341463415,63.1670487804878,65.878756097561,82.3463414634146,67.7189268292683,50.3631219512195,72.4981463414634,55.0230243902439,55.2209024390244,66.259512195122,70.99,76.2609756097561,80.2780487804878,81.7048780487805,48.9379268292683,74.7157804878049,51.1914878048781,59.1323658536585,74.2469268292683,69.4001707317073,65.4565609756098,67.5223658536585,72.6403414634147,70.3052926829268,73.6463414634147,75.1759512195122,64.2918292682927,57.7676829268293,71.159512195122,76.8361951219512,78.8414634146341,68.2275853658537,72.8108780487805,74.0744146341464,79.6243902439024,75.756487804878,71.669243902439,73.2503902439024,63.583512195122,56.7365853658537,58.2719268292683,59.2373658536585,55.633)
read.csv("RProgrammingForDataScience - Course\\Section 5\\P2-Section5-Homework-Data.csv")
fertilityRateData <- read.csv("RProgrammingForDataScience - Course\\Section 5\\P2-Section5-Homework-Data.csv")
head(fertilityRateData)
summary(fertilityRateData)
Country_Code <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","WSM","YEM","ZAF","COD","ZMB","ZWE")
Life_Expectancy_At_Birth_1960 <- c(65.5693658536586,32.328512195122,32.9848292682927,62.2543658536585,52.2432195121951,65.2155365853659,65.8634634146342,61.7827317073171,70.8170731707317,68.5856097560976,60.836243902439,41.2360487804878,69.7019512195122,37.2782682926829,34.4779024390244,45.8293170731707,69.2475609756098,52.0893658536585,62.7290487804878,60.2762195121951,67.7080975609756,59.9613658536585,42.1183170731707,54.2054634146342,60.7380487804878,62.5003658536585,32.3593658536585,50.5477317073171,36.4826341463415,71.1331707317073,71.3134146341463,57.4582926829268,43.4658048780488,36.8724146341463,41.523756097561,48.5816341463415,56.716756097561,41.4424390243903,48.8564146341463,60.5761951219512,63.9046585365854,69.5939268292683,70.3487804878049,69.3129512195122,44.0212682926829,72.1765853658537,51.8452682926829,46.1351219512195,53.215,48.0137073170732,37.3629024390244,69.1092682926829,67.9059756097561,38.4057073170732,68.819756097561,55.9584878048781,69.8682926829268,57.5865853658537,39.5701219512195,71.1268292682927,63.4318536585366,45.8314634146342,34.8863902439024,32.0422195121951,37.8404390243902,36.7330487804878,68.1639024390244,59.8159268292683,45.5316341463415,61.2263414634146,60.2787317073171,66.9997073170732,46.2883170731707,64.6086585365854,42.1000975609756,68.0031707317073,48.6403170731707,41.1719512195122,69.691756097561,44.945512195122,48.0306829268293,73.4286585365854,69.1239024390244,64.1918292682927,52.6852682926829,67.6660975609756,58.3675853658537,46.3624146341463,56.1280731707317,41.2320243902439,49.2159756097561,53.0013170731707,60.3479512195122,43.2044634146342,63.2801219512195,34.7831707317073,42.6411951219512,57.303756097561,59.7471463414634,46.5107073170732,69.8473170731707,68.4463902439024,69.7868292682927,64.6609268292683,48.4466341463415,61.8127804878049,39.9746829268293,37.2686341463415,57.0656341463415,60.6228048780488,28.2116097560976,67.6017804878049,42.7363902439024,63.7056097560976,48.3688048780488,35.0037073170732,43.4830975609756,58.7452195121951,37.7736341463415,59.4753414634146,46.8803902439024,58.6390243902439,35.5150487804878,37.1829512195122,46.9988292682927,73.3926829268293,73.549756097561,35.1708292682927,71.2365853658537,42.6670731707317,45.2904634146342,60.8817073170732,47.6915853658537,57.8119268292683,38.462243902439,67.6804878048781,68.7196097560976,62.8089268292683,63.7937073170732,56.3570487804878,61.2060731707317,65.6424390243903,66.0552926829268,42.2492926829268,45.6662682926829,48.1876341463415,38.206,65.6598292682927,49.3817073170732,30.3315365853659,49.9479268292683,36.9658780487805,31.6767073170732,50.4513658536585,59.6801219512195,69.9759268292683,68.9780487804878,73.0056097560976,44.2337804878049,52.768243902439,38.0161219512195,40.2728292682927,54.6993170731707,56.1535365853659,54.4586829268293,33.7271219512195,61.3645365853659,62.6575853658537,42.009756097561,45.3844146341463,43.6538780487805,43.9835609756098,68.2995365853659,67.8963902439025,69.7707317073171,58.8855365853659,57.7238780487805,59.2851219512195,63.7302195121951,59.0670243902439,46.4874878048781,49.969512195122,34.3638048780488,49.0362926829268,41.0180487804878,45.1098048780488,51.5424634146342)
Life_Expectancy_At_Birth_2013 <- c(75.3286585365854,60.0282682926829,51.8661707317073,77.537243902439,77.1956341463415,75.9860975609756,74.5613658536585,75.7786585365854,82.1975609756098,80.890243902439,70.6931463414634,56.2516097560976,80.3853658536585,59.3120243902439,58.2406341463415,71.245243902439,74.4658536585366,76.5459512195122,75.0735365853659,76.2769268292683,72.4707317073171,69.9820487804878,67.9134390243903,74.1224390243903,75.3339512195122,78.5466585365854,69.1029268292683,64.3608048780488,49.8798780487805,81.4011219512195,82.7487804878049,81.1979268292683,75.3530243902439,51.2084634146342,55.0418048780488,61.6663902439024,73.8097317073171,62.9321707317073,72.9723658536585,79.2252195121951,79.2563902439025,79.9497804878049,78.2780487804878,81.0439024390244,61.6864634146342,80.3024390243903,73.3199024390244,74.5689512195122,75.648512195122,70.9257804878049,63.1778780487805,82.4268292682927,76.4243902439025,63.4421951219512,80.8317073170732,69.9179268292683,81.9682926829268,68.9733902439024,63.8435853658537,80.9560975609756,74.079512195122,61.1420731707317,58.216487804878,59.9992682926829,54.8384146341464,57.2908292682927,80.6341463414634,73.1935609756098,71.4863902439024,78.872512195122,66.3100243902439,83.8317073170732,72.9428536585366,77.1268292682927,62.4011463414634,75.2682926829268,68.7046097560976,67.6604146341463,81.0439024390244,75.1259756097561,69.4716829268293,83.1170731707317,82.290243902439,73.4689268292683,73.9014146341463,83.3319512195122,70.45,60.9537804878049,70.2024390243902,67.7720487804878,65.7665853658537,81.459756097561,74.462756097561,65.687243902439,80.1288780487805,60.5203902439024,71.6576829268293,74.9127073170732,74.2402926829268,49.3314634146342,74.1634146341464,81.7975609756098,73.9804878048781,80.3391463414634,73.7090487804878,68.811512195122,64.6739024390244,76.6026097560976,76.5326585365854,75.1870487804878,57.5351951219512,80.7463414634146,65.6540975609756,74.7583658536585,69.0618048780488,54.641512195122,62.8027073170732,74.46,61.466,74.567512195122,64.3438780487805,77.1219512195122,60.8281463414634,52.4421463414634,74.514756097561,81.1048780487805,81.4512195121951,69.222,81.4073170731707,76.8410487804878,65.9636829268293,77.4192195121951,74.2838536585366,68.1315609756097,62.4491707317073,76.8487804878049,78.7111951219512,80.3731707317073,72.7991707317073,76.3340731707317,78.4184878048781,74.4634146341463,71.0731707317073,63.3948292682927,74.1776341463415,63.1670487804878,65.878756097561,82.3463414634146,67.7189268292683,50.3631219512195,72.4981463414634,55.0230243902439,55.2209024390244,66.259512195122,70.99,76.2609756097561,80.2780487804878,81.7048780487805,48.9379268292683,74.7157804878049,51.1914878048781,59.1323658536585,74.2469268292683,69.4001707317073,65.4565609756098,67.5223658536585,72.6403414634147,70.3052926829268,73.6463414634147,75.1759512195122,64.2918292682927,57.7676829268293,71.159512195122,76.8361951219512,78.8414634146341,68.2275853658537,72.8108780487805,74.0744146341464,79.6243902439024,75.756487804878,71.669243902439,73.2503902439024,63.583512195122,56.7365853658537,58.2719268292683,59.2373658536585,55.633)
# Create the LifeExpectancy table
lifeExpectancyData <- data.frame(Code = CountryCode, LE1960 = Life_Expectancy_At_Birth_1960, LE2013 = Life_Expectancy_At_Birth_2013)
# Create the LifeExpectancy table
lifeExpectancyData <- data.frame(Code = Country_Code, LE1960 = Life_Expectancy_At_Birth_1960, LE2013 = Life_Expectancy_At_Birth_2013)
lifeExpectancyData
head(fertilityRateData)
rm(Country_Code, Life_Expectancy_At_Birth_1960, Life_Expectancy_At_Birth_2013)
# Rename columns on fertilityRateData pre merge
colnames(fertilityRateData)
fertilityRate1960 <- fertilityRateData[fertilityRateData$Year == 1960, ]
head(fertilityRate1960)
summary(fertilityRate1960)
summary(fertilityRateData)
fertilityRate2013 <- fertilityRateData[fertilityRateData$Year == 2013, ]
summary(fertilityRate2013)
# Create full table for 1960
data1960 <- merge(fertilityRate1960, lifeExpectancyData, by.x=Country.Code, by.y=Code)
# Create full table for 1960
data1960 <- merge(fertilityRate1960, lifeExpectancyData, by.x="Country.Code", by.y="Code")
head(data1960)
data$LE2013 <- NULL
data[ , "LE2013"]
data[ , LE2013]
data1960$LE2013
data1960$LE2013 <- NULL
head(data1960)
#Rename LE1960 Column
colnames(data1960$LE1960)
#Rename LE1960 Column
colnames(data1960)
?colname()
colnames(data1960) <- c("Code", "Country", "Region", "Year", "Fertility.Rate", "Life.Expectancy")
head(data1960)
# Create full table for 2013
data2013 <- merge(fertilityRate2013, lifeExpectancyData, by.x="Country.Code", by.y="Code")
head(data2013)
# Remove 2013 Data
data1960$LE21960 <- NULL
colnames(data2013) <- c("Code", "Country", "Region", "Year", "Fertility.Rate", "Life.Expectancy")
head(data2013)
# Create full table for 2013
data2013 <- merge(fertilityRate2013, lifeExpectancyData, by.x="Country.Code", by.y="Code")
head(data2013)
# Remove 2013 Data
data1960$LE1960 <- NULL
colnames(data2013) <- c("Code", "Country", "Region", "Year", "Fertility.Rate", "Life.Expectancy")
head(data2013)
data2013 <- merge(fertilityRate2013, lifeExpectancyData, by.x="Country.Code", by.y="Code")
head(data2013)
# Remove 2013 Data
data1960$LE1960 <- NULL
head(data2013)
# Remove 2013 Data
data1960$LE1960 <- NULL
head(data2013)
data1960 <- merge(fertilityRate1960, lifeExpectancyData, by.x="Country.Code", by.y="Code")
head(data1960)
# Remove 2013 Data
data1960$LE2013 <- NULL
colnames(data1960) <- c("Code", "Country", "Region", "Year", "Fertility.Rate", "Life.Expectancy")
head(data1960)
data2013 <- merge(fertilityRate2013, lifeExpectancyData, by.x="Country.Code", by.y="Code")
head(data2013)
# Remove 2013 Data
data2013$LE1960 <- NULL
colnames(data2013) <- c("Code", "Country", "Region", "Year", "Fertility.Rate", "Life.Expectancy")
head(data2013)
qplot()
?qplot()
?qplot(data=data2013)
# ----- 1960
qplot(data=data1960, x = Fertility.Rate, y = Life.Expectancy)
# ----- 1960
qplot(data=data1960, x = Life.Expectancy, y = Fertility.Rate)
# ----- 1960
qplot(data=data1960, x = Life.Expectancy, y = Fertility.Rate)
# ----- 1960
qplot(data=data1960, x = Life.Expectancy, y = Fertility.Rate)
# ----- 1960
qplot(data=data1960, x = Life.Expectancy, y = Fertility.Rate, colour=Region)
# ----- 2013
qplot(data=data2013, x = Life.Expectancy, y = Fertility.Rate, colour=Region)
getwd()
setwd("/Users/Billy/Documents/RStudioWorkspace/RProgrammingForDataScience - Course/Section 6")
getwd()
# Read the dataset
movies <- read.csv(file="P2-Movie-Ratings.csv")
head(movies)
summary(movies)
tail(movies)
head(movies)
tail(movies)
summary(movies)
movies[movies$Rotten.Tomatoes.Ratings.. == 0]
movies[movies$Rotten.Tomatoes.Ratings.. == 0, ]
# Lets change the column names
colnames(movies)
colnames(movies) <- c("Film", "Genre", "CriticRating", "AudienceRating", "BudgetMillions", "Year")
head(movies)
str(movies)
summary(movies)
summary(movies)
# Creating a non-factor numeric variable into a factor numeric variable
factor(Year)
# Creating a non-factor numeric variable into a factor numeric variable
factor(movies$Year)
summary(movies)
str(movies)
# Creating a non-factor numeric variable into a factor numeric variable
# Create a vector of that column and assign it to the column
movies$Year <- factor(movies$Year)
# Looking at the summary we see that year is a numerical value, however we want it to be a factor
# Having year of release as a numerical value is probably useless, you won't be performing arithmetic on them
summary(movies)
str(movies)
library(ggolot2)
library(ggplot2)
ggplot()
ggplot(data = movies)
# The aes function allows you to set aesthetics
# aesthetics describes how the data is mapped to what you want to see
# We wish to map CriticRating against AudianceRating
ggplot(data = movies, aes(x=CriticRating, y=AudianceRating))
# The aes function allows you to set aesthetics
# aesthetics describes how the data is mapped to what you want to see
# We wish to map CriticRating against AudianceRating
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating))
# We can add geometry to this plot
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating)) + geom_point()
# We can also colour the points, as with qplot()
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre)) + geom_point()
# We can also colour and size the points, as with qplot()
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre, size = 3)) + geom_point()
# We can also colour and size the points, as with qplot()
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre, size = 2)) + geom_point()
# We can also colour and size the points, as with qplot()
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre, size = I(2)) + geom_point()
# We can also colour and size the points, as with qplot()
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre, size = budget) + geom_point()
# We can also colour and size the points, as with qplot()
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre, size = Budget)) + geom_point()
# We can also colour and size the points, as with qplot()
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre, size = BudgetMillions)) + geom_point()
# We can also colour and size the points, as with qplot()
# In this case we size the datapoints based off of the budget. Larget budget films get bigger dots
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre, size = BudgetMillions)) + geom_point()
# When creating a plot, you are actually creating an object
# Layers can be added to this object
p <- ggplot(data = movies,
aes(x=CriticRating, y=AudienceRating, colour=Genre, size = BudgetMillions)) +
geom_point()
View(p)
View(p)
p
# We can run the plot, with geometry selected when we run it
p + geom_point()
p + geom_bar()
# When creating a plot, you are actually creating an object
# Layers can be added to this object
# The desired data is copied into the newly created object, as well as layers, themes, etc.
# (all types of data for the plot can be seen in the data window)
p <- ggplot(data = movies,
aes(x=CriticRating, y=AudienceRating, colour=Genre, size = BudgetMillions))
# We removed the geometry above and assigned the variable
# If we run that we will not see plot points, because there is no geometry
# The plot can then be viewed as such
p
# We can run the plot, with geometry selected when we run it
p + geom_point()
p + geom_bar()
p + geom_line()
# p contains the data, and explains how we wish to map the data
# however we can choose different types of geometry aside from that
# If we want, we can use two different types of geometry together
p + geom_line() + geom_point()
colour=Genre, size=BudgetMillions)
q <- ggplot(data=movies, aes(x = CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
# Add Geom later
q + geom_point()
# What if we don't like the default aesthetic information in the plot object?
# We can override them
q + geom_point(aes(size=I(2)))
# What if we don't like the default aesthetic information in the plot object?
# We can override them
q + geom_point(aes(size=I(CriticRating)))
# What if we don't like the default aesthetic information in the plot object?
# We can override them
q + geom_point(aes(size=CriticRating))
# What if we don't like the default aesthetic information in the plot object?
# We can override them
q + geom_point(aes(size=2))
# What if we don't like the default aesthetic information in the plot object?
# We can override them
# Here we are overriding the default size value
q + geom_point(aes(size=1))
# What if we don't like the default aesthetic information in the plot object?
# We can override them
# Here we are overriding the default size value
q + geom_point(aes(size=I(1)))
# What if we don't like the default aesthetic information in the plot object?
# We can override them
# Here we are overriding the default size value
q + geom_point(aes(size=I(2)))
# We might want to override colour too
q + geom_point(aes(colour=BudgetMillions))
# We can even override the X and Y values
q + geom_point(x = BudgetMillions)
# We can even override the X and Y values
q + geom_point(aes(x = BudgetMillions))
# There is an issue with the overriding however, the old plot lables will remain when overriden.
# E.g. if the default x axis is CriticRating, and we change it to BudgetMillions, then the lable
#   will remain as CriticRating
# We can fix this by:
q + geom_point(aes(x = BudgetMillions)) + xlab("Budget Millions")
# If we are layering data, we can alter each layer
q + geom_point() + geom_line()
# If we are layering data, we can alter each layer
q + geom_point() + geom_line(aes(size=I(1)))
# If we are layering data, we can alter each layer
q + geom_point() + geom_line(size=I(1))
r <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating))
r + geom_point()
# Add Colour (two ways)
# 1. By Mapping
r + geom_point(aes(colour=Genre))
# 2. By Setting
r + geom_point(Colour = "DarkGreen")
# 2. By Setting
r + geom_point(Color = "DarkGreen")
# 2. By Setting
r + geom_point(colour = "DarkGreen")
# The above works, however the below will not work
r + geom_point(aes(colour = "DarkGreen"))
# Mapping
r + geom_point(aes(size=BudgetMillions))
# Setting
r + geom_point(size=10)
# Setting
r + geom_point(size=5)
s <- ggplot(data = movies, aes(x=BudgetMillions))
s + geom_histogram(binwidth=10)
# We will create a histogram, each bin will cover a range of $10million
s + geom_histogram(binwidth=10)
# We will create a histogram, each bin will cover a range of $10million
s + geom_histogram(binwidth=2)
# We will create a histogram, each bin will cover a range of $10million
s + geom_histogram(binwidth=10)
# We will create a histogram, each bin will cover a range of $10million
s + geom_histogram(binwidth=5)
# We're only going to use one axis for this
s <- ggplot(data = movies, aes(x=CriticRating))
# We will create a histogram, each bin will cover a range of $10million
s + geom_histogram(binwidth=5)
# Add colour, but map it to genre
s + geom_histogram(binwidth = 10, aes(fill=Genre))
# Add colour, but map it to genre
# we use fill, not colour. Colour is reserved for the outline of the bins
s + geom_histogram(binwidth = 10, colour="Black", aes(fill=Genre))
# ----- Density Chart ----- #
s + geom_density(aes(fill=genre))
# ----- Density Chart ----- #
s + geom_density(aes(fill=Genre))
BudgetMillions
# We will create a histogram, each bin will cover a range of $10million
s + geom_histogram(binwidth=10)
# Add colour, but map it to genre
# we use fill to colour the bars, not colour.
s + geom_histogram(binwidth = 10, aes(fill=Genre))
# Colour is reserved for the outline of the bins as we can see here
s + geom_histogram(binwidth = 10, colour="Black", aes(fill=Genre))
# We're only going to use one axis for this
s <- ggplot(data = movies, aes(x=BudgetMillions))
# We will create a histogram, each bin will cover a range of $10million
s + geom_histogram(binwidth=10)
# Add colour, but map it to genre
# we use fill to colour the bars, not colour.
s + geom_histogram(binwidth = 10, aes(fill=Genre))
# Colour is reserved for the outline of the bins as we can see here
s + geom_histogram(binwidth = 10, colour="Black", aes(fill=Genre))
# ----- Density Chart ----- #
s + geom_density(aes(fill=Genre))
# There is an issue with this chart, some genres are hidden behind others
# This can be rectified by stacking the genres
s + geom_density(aes(fill=Genre), position="stack")
t <- geom_histogram(binwidth=10, fill = "White", colour ="Blue")
t <- ggplot(data=movies, aes(x=AudienceRating))
t <- geom_histogram(binwidth=10, fill = "White", colour ="Blue")
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth=10, fill = "White", colour ="Blue")
t + geom_histogram(binwidth=10,
aes(x=AudienceRating),
fill="White", colour="Blue")
# It is possible to set aesthetics after assigning the plot data
t <- ggplot(data=movies)
t + geom_histogram(binwidth=10,
aes(x=AudienceRating),
fill="White", colour="Blue")
t + geom_histogram(binwidth=10,
aes(x=CriticRating),
fill="White", colour="Blue")
# It is also possible to make a "skeleton plot"
ske <- ggplot()
?geom_smooth()
u <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating, colour=Genre))
u + geom_point()
u + geom_point() + geom_smooth()
# Using the geom_smooth function
# At the moment this does not help
u + geom_point() + geom_smooth(fill=NA)
# Using the geom_smooth function
# At the moment this does not help improve the graph
u + geom_point() + geom_smooth()
# However if we turn off the fill, we can see just the averages over time of each genre
u + geom_point() + geom_smooth(fill=NA)
# Using the geom_smooth function
# At the moment this does not help improve the graph
u + geom_point() + geom_smooth()
# However if we turn off the fill, we can see just the averages over time of each genre
u + geom_point() + geom_smooth(fill=NA)
# Another type of smoother is a box plot
u <- ggplot(data=movies, aes(x=Genre, y=AudienceRating, colour=Genre))
u
u + geom_boxplot()
u + geom_boxplot() + geom_point()
u + geom_boxplot()
# Lets add points over the boxplot
u + geom_boxplot() + geom_point()
# This doesn't look good, it's very cluttered
# We can fix this with geom_jitter, instead of geom_point
# the jitter is based off nothing in particular, the points are positiones randomly on the x axis
u + geom_boxplot() + geom_jitter()
# A better way to visualize is to put the points first
u + geom_jitter() + geom_boxplot()
# Though we need some transparency to see all of the points
u + geom_jitter() + geom_boxplot(alpha = 0.5)
u <- ggplot(data=movies, aes(x=Genre, y=CriticRating, colour=Genre))
u + geom_jitter() + geom_boxplot(alpha = 0.5)
v <- ggplot(data=movies, aes(x=budgetMillions))
v + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
v <- ggplot(data=movies, aes(x=BudgetMillions))
v + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
# These histograms are fine, however it is hard to compare individual genres
# Facets help us with this, we can use them to create an individual histogram for each Genre
v +
geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black") +
facet_grid(Genre~.)
# These histograms are fine, however it is hard to compare individual genres
# Facets help us with this, we can use them to create an individual histogram for each Genre
# facet_grid(Genre~.) here tells us we want a a row for each genre, and one single column
v +
geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black") +
facet_grid(Genre~..)
# These histograms are fine, however it is hard to compare individual genres
# Facets help us with this, we can use them to create an individual histogram for each Genre
# facet_grid(Genre~.) here tells us we want a a row for each genre, and one single column
v +
geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black") +
facet_grid(Genre~.)
# These histograms are hard to read however. We can fix it like this
v + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black") + facet_grid(Genre~., scales="free")
# These histograms are fine, however it is hard to compare individual genres
# Facets help us with this, we can use them to create an individual histogram for each Genre
# facet_grid(Genre~.) here tells us we want a a row for each genre, and one single column
v + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black") + facet_grid(Genre~.)
# These histograms are hard to read however. We can fix it like this
v + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black") + facet_grid(Genre~., scales="free")
# These histograms are fine, however it is hard to compare individual genres
# Facets help us with this, we can use them to create an individual histogram for each Genre
# facet_grid(Genre~.) here tells us we want a a row for each genre, and one single column
v + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black") + facet_grid(Genre~.)
# scatterplots
w <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating, Colour=Genre))
w + geom_point(size=I(3))
w = geom_Point(size=I(1)) + facet_grid(Genre~.)
Genre
w + geom_point(size=I(1))
w = geom_point(size=I(1)) + facet_grid(Genre~.)
w + geom_point(size=I(1)) + facet_grid(Genre~.)
# scatterplots
w <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating, Colour=Genre))
w + geom_point(size=I(1))
w + geom_point(size=I(1)) + facet_grid(Genre~.)
View(v)
View(w)
# scatterplots
w <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating, colour=Genre))
w + geom_point(size=I(1))
w + geom_point(size=I(1)) + facet_grid(Genre~.)
# Another thing we can do is base the grid off of two variables
w + geom_point(size=I(1)) + facet_grid(Genre~Year)
# We can also add a smoother to this
w + geom_point(size=I(1)) + facet_grid(Genre~Year)+ geom_smooth()
# We can also add a smoother to this
w + geom_point(size=I(2)) + facet_grid(Genre~Year)+ geom_smooth()
# Base the size off of the Budget for the craic
w + geom_point(size=BudgetMillions) + facet_grid(Genre~Year)+ geom_smooth()
# Base the size off of the Budget for the craic
w + geom_point(aes(size=BudgetMillions) + facet_grid(Genre~Year)+ geom_smooth()
# Base the size off of the Budget for the craic
w + geom_point(aes(size=BudgetMillions)) + facet_grid(Genre~Year)+ geom_smooth()
# Base the size off of the Budget for the craic
w + geom_point(aes(size=BudgetMillions)) + facet_grid(Genre~Year)+ geom_smooth()
# Our ratings are from 0 to 100, however the produced graphs in the last lecture have axies ranging from -100 to 150.
# We need to zoom in on these graphs to fix the axis.
w <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating, size=BudgetMillions, colour=Genre))
w + geom_point()
# Say we only wish to see the movies with the highest ratings (AudienceRating > 50 and CriticRating > 50)
w + geom_point() + xlin(50, 100)
# Say we only wish to see the movies with the highest ratings (AudienceRating > 50 and CriticRating > 50)
w + geom_point() + xlim(50, 100)
# Say we only wish to see the movies with the highest ratings (AudienceRating > 50 and CriticRating > 50)
# We can use xlim and ylim
w + geom_point() + xlim(50, 100) + ylim(50, 100)
n + geom_histogram(binwidth=10, aes(fill=Genre), colour="Black") + ylim(0, 50)
# using limits doesn't always work well however
n <- ggplot(data=movies, aes(x=BudgetMillions))
n + geom_histogram(binwidth=10, aes(fill=Genre), colour="Black") + ylim(0, 50)
# To remedy this, we can zoom in on the plot instead
# coord_cartesian is used to zoom in
n + geom_histogram(binwidth=10, aes(fill=Genre), colour="Black") + coord_cartesian(ylim=c(0, 50))
w <- ggplot(data=movies, aes(x=CriticRating, y=AudienceRating, colour=Genre))
# Lets fix the ratings from the plot in the previous lecture
w + geom_point(aes(size=BudgetMillions)) + facet_grid(Genre~Year)+ geom_smooth()
# As can be seen, the y axis ranges from -50 to 150, where possible values are only in the 0 to 100 range
# To fix it:
w + geom_point(aes(size=BudgetMillions)) + facet_grid(Genre~Year)+ geom_smooth() + coord_cartesian(ylim(c(0, 100)))
# As can be seen, the y axis ranges from -50 to 150, where possible values are only in the 0 to 100 range
# To fix it:
w + geom_point(aes(size=BudgetMillions)) + facet_grid(Genre~Year) + coord_cartesian(ylim(c(0, 100))) + geom_smooth()
# As can be seen, the y axis ranges from -50 to 150, where possible values are only in the 0 to 100 range
# To fix it:
w + geom_point(aes(size=BudgetMillions)) + facet_grid(Genre~Year) + coord_cartesian(ylim=c(0, 100))) + geom_smooth()
# As can be seen, the y axis ranges from -50 to 150, where possible values are only in the 0 to 100 range
# To fix it:
w + geom_point(aes(size=BudgetMillions)) + facet_grid(Genre~Year) + coord_cartesian(ylim=c(0, 100)) + geom_smooth()
o <- ggplot(data = movies, aes(x=BudgetMillions))
o + geom_histogram(binwidth = 10, aes(fill=Genre), Colour="Black")
o + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
h <- o + geom_histogram(binwidth = 10, aes(fill=Genre), colour="Black")
# axes lables
h + xlab("Money Axis")
# axes lables
h + xlab("Cost in Millions") +
ylab("Number of Movies")
# axes lables
# We can change and colour the text of each axis
h + xlab("Cost in Millions") +
ylab("Number of Movies") +
theme(axis.title.x = element_text(colour="DarkGreen", size=30),
axis.title.y = element_text(colour="Red", size=40))
# We can edit the size of the tick marks on each axis
h + theme(axis.text.x = element_text(size=20), axis.text.y = element_text(size=30))
# We can edit the size of the tick marks on each axis
h + theme(axis.text.x = element_text(size=20), axis.text.y = element_text(size=20))
# We can edit the size of the axis text (the numbers)
h + theme(axis.text.x = element_text(size=20), axis.text.y = element_text(size=20))
# We can edit the size of the axis text (the numbers)
h + theme(axis.text.x = element_text(size=15), axis.text.y = element_text(size=15))
# And the legend
h + theme(legend.title = element_text(size=20), legend.text = element_text(size=15))
# And the legend
h + theme(legend.title = element_text(size=20),
legend.text = element_text(size=15),
legend.position = c(1,1))
# And the legend
h + theme(legend.title = element_text(size=20),
legend.text = element_text(size=15),
legend.position = c(1,1),              # When positioning the legend, pass an (x, y) value between 0 and 1
legend.justification = c(1,1))         # On it's own, positioning the legend isn't enough. it has to be anchored correctly to that position
# Add a title to the plot
h + ggtitle("Movie Budget Distribution") +
theme(plot.title = element_text(colour = "DarkBlue", size = 40))
# Add a title to the plot
h + ggtitle("Movie Budget Distribution") +
theme(plot.title = element_text(colour = "DarkBlue", size = 30))
# Add a title to the plot
h + ggtitle("Movie Budget Distribution") +
theme(plot.title = element_text(colour = "DarkBlue", size = 30, family="Courier"))
